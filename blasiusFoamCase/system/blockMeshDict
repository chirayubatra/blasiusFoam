/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2006                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   0.001;

vertices
(
    (-5 0 1)   //0
    (0 0 1)    //1
    (10 0 1)    //2
    (10 50 1)    //3
    (0 50 1)    //4
    (-5 50 1)   //5
                 
    (-5 0 0)     //6
    (0 0 0)      //7
    (10 0 0)      //8
    (10 50 0)      //9
    (0 50 0)      //10
    (-5 50 0)     //11
);

blocks
(
//
//
//    hex (6 7 10 11 0 1 4 5) (40 200 1) simpleGrading (0.1 10 1)
//    hex (7 8  9 10 1 2 3 4) (80 200 1) simpleGrading (10 10 1)
//
      hex (6 7 10 11 0 1 4 5) (40 300 1) simpleGrading (0.1 ((20 70 10) (80 30 1)) 1)
      hex (7 8  9 10 1 2 3 4) (80 300 1) simpleGrading (10 ((20 70 10) (80 30 1)) 1)
//    hex (6 8 9 11 0 2 3 5) (30 10 1) simpleGrading (1 1 1)
//
//    // 3 patch bottomWall y+ : min = 0.18489745, max = 0.38018561, average = 0.21587743
//    hex (6 7 10 11 0 1 4 5) ( 24 97 1) simpleGrading (((1 9 0.15)(0.1 3 0.9)) 50000 1)
//    hex (7 8  9 10 1 2 3 4) (113 97 1) simpleGrading (((0.1 22 1.5)(0.35 23 7)(0.515 12 1)) 50000 1)
//
);

edges
(
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (6 0 5 11)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (8 9 3 2)
        );
    }
    topWall
    {
        type wall;
        faces
        (
            (11 5 4 10)
            (10 4 3 9)
        );
    }
    bottomWall
    {
        type wall;
        faces
        (
            (7 8 2 1)
        );
    }
    symmetry
    {
        type symmetryPlane;
        faces
        (
            (6 7 1 0)
        );
    }
    frontAndBack
    {
        type empty;
        faces
        (
            (0 1 4 5)
            (1 2 3 4)
            (6 11 10 7)
            (7 10 9 8)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
